<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: apis/iam/provider/v1alpha/provider.proto

namespace Sugarcrm\Apis\Iam\Provider\V1alpha;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Attribute map to map claims/assertions from the Provider into the IdP.
 *
 * Generated from protobuf message <code>sugarcrm.apis.iam.provider.v1alpha.AttributeMap</code>
 */
class AttributeMap extends \Google\Protobuf\Internal\Message
{
    /**
     * Source field name from the claim/assertion. Note that the syntax is
     * provider dependent.
     *
     * Generated from protobuf field <code>string source = 1;</code>
     */
    private $source = '';
    /**
     * The destination field to map the value from the source field to.
     * Examples:
     *  attributes.given_name
     *  attributes.address.street_address
     *
     * Generated from protobuf field <code>string destination = 2;</code>
     */
    private $destination = '';
    /**
     * If false do not map source->destination if a value is already present.
     * True will always map the value regardless if any previous value is
     * present.
     *
     * Generated from protobuf field <code>bool overwrite = 3;</code>
     */
    private $overwrite = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $source
     *           Source field name from the claim/assertion. Note that the syntax is
     *           provider dependent.
     *     @type string $destination
     *           The destination field to map the value from the source field to.
     *           Examples:
     *            attributes.given_name
     *            attributes.address.street_address
     *     @type bool $overwrite
     *           If false do not map source->destination if a value is already present.
     *           True will always map the value regardless if any previous value is
     *           present.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Apis\Iam\Provider\V1Alpha\Provider::initOnce();
        parent::__construct($data);
    }

    /**
     * Source field name from the claim/assertion. Note that the syntax is
     * provider dependent.
     *
     * Generated from protobuf field <code>string source = 1;</code>
     * @return string
     */
    public function getSource()
    {
        return $this->source;
    }

    /**
     * Source field name from the claim/assertion. Note that the syntax is
     * provider dependent.
     *
     * Generated from protobuf field <code>string source = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSource($var)
    {
        GPBUtil::checkString($var, True);
        $this->source = $var;

        return $this;
    }

    /**
     * The destination field to map the value from the source field to.
     * Examples:
     *  attributes.given_name
     *  attributes.address.street_address
     *
     * Generated from protobuf field <code>string destination = 2;</code>
     * @return string
     */
    public function getDestination()
    {
        return $this->destination;
    }

    /**
     * The destination field to map the value from the source field to.
     * Examples:
     *  attributes.given_name
     *  attributes.address.street_address
     *
     * Generated from protobuf field <code>string destination = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDestination($var)
    {
        GPBUtil::checkString($var, True);
        $this->destination = $var;

        return $this;
    }

    /**
     * If false do not map source->destination if a value is already present.
     * True will always map the value regardless if any previous value is
     * present.
     *
     * Generated from protobuf field <code>bool overwrite = 3;</code>
     * @return bool
     */
    public function getOverwrite()
    {
        return $this->overwrite;
    }

    /**
     * If false do not map source->destination if a value is already present.
     * True will always map the value regardless if any previous value is
     * present.
     *
     * Generated from protobuf field <code>bool overwrite = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setOverwrite($var)
    {
        GPBUtil::checkBool($var);
        $this->overwrite = $var;

        return $this;
    }

}

